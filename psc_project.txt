-----------------TYPING SPEED CHECKER-----------------

BY- MAHER THAKKAR (18BCE104)
    JAINEET SHAH (18BCE083) 

CODE-

import random
import time
import sys
import pygame
from pygame.locals import *


class Typing:
    def __init__(self):
        self.width=750
        self.height=500
        self.reset=True
        self.img=pygame.image.load('image.png')
        self.img=pygame.transform.scale(self.img, (self.width,self.height))
        self.bg=pygame.image.load('background.jpg')
        self.bg=pygame.transform.scale(self.bg, (500,750))
        self.scr=pygame.display.set_mode((self.width,self.height))
        self.act=False
        self.intext=''
        self.word=''
        self.start_t=0
        self.total_t=0
        self.acc='0%'
        self.res='Time:0 Accuracy:0 % Wpm:0 '
        self.wpm=0
        self.end=False
        self.head=(255,165,0)
        self.text=(240,240,240)
        self.result=(255,70,70)
        pygame.display.set_caption('Typing Speed Checker')
        pygame.init()
        
    def draw (self, scr, message, y ,size, color):
        font=pygame.font.Font(None, size)
        txt=font.render(message,1,color)
        txt_rect=txt.get_rect(center=(self.width/2, y))
        scr.blit(txt, txt_rect)
        pygame.display.update()
    
    def sentence (self):
        fi = open('s.txt').read()
        sent=fi.split('\n')
        sentence=random.choice(sent)
        return sentence
    
    def show_res (self, scr):
        if(not self.end):
            self.total_t=time.time()-self.start_t
            count=0
            for i,h in enumerate(self.word):
                try:
                    if self.intext[i] == h:
                        count=count+1
                except:
                    pass
            self.acc=count/len(self.word)*100
            self.wpm=len(self.intext)*60/(5*self.total_t)
            self.end=True
            self.res='Time:'+str(round(self.total_t)) +" secs Accuracy:"+ str(round(self.acc)) + "%" + ' Wpm: ' + str(round(self.wpm))
            self.t_img=pygame.image.load('icon.png')
            self.t_img=pygame.transform.scale(self.t_img, (150,150))
            scr.blit(self.t_img, (self.width/2-75,self.height-140))
            self.draw(scr,"Reset", self.height - 70, 26, (100,100,100))
            pygame.display.update()
            
    def Run(self):
        self.reset_ty()
        self.runn=True
        while(self.runn):
            cl=pygame.time.Clock()
            self.scr.fill((0,0,0), (50,250,650,50))
            pygame.draw.rect(self.scr,self.head, (50,250,650,50), 2)
            self.draw(self.scr, self.intext, 274, 26,(250,250,250))
            pygame.display.update()
            for event in pygame.event.get():
                if event.type == QUIT:
                    self.runn=False
                    sys.exit()
                elif event.type == pygame.MOUSEBUTTONUP:
                    x,y=pygame.mouse.get_pos()
                    if(x>=50 and x<=650 and y>=250 and y<=300):
                        self.act=True
                        self.intext=''
                        self.start_t=time.time()
                     
                    if(x>=310 and x<=510 and y>=390 and self.end):
                        self.reset_ty()
                        x,y=pygame.mouse.get_pos()
                elif event.type == pygame.KEYDOWN:
                    if self.act and not self.end:
                        if event.key == pygame.K_RETURN:
                            self.show_res(self.scr)
                            self.draw(self.scr, self.res,350, 28, self.result)
                            self.end=True
                        elif event.key == pygame.K_BACKSPACE:
                            self.intext=self.intext[:-1]
                        else:
                            try:
                                self.intext=self.intext+event.unicode
                            except:
                                pass
            pygame.display.update()
        cl.tick(60)
    
    def reset_ty(self):
        self.scr.blit(self.img, (0,0))
        pygame.display.update()
        time.sleep(1)
        self.intext=''
        self.word=''
        self.start_t=0
        self.total_t=0
        self.wpm=0
        self.reset=False
        self.end=False
        self.word=self.sentence()
        if (not self.word): 
            self.reset_ty()
        self.scr.fill((0,0,0))
        self.scr.blit(self.bg,(0,0))
        message="Typing Speed Checker"
        self.draw(self.scr, message,80, 80,self.head)
        pygame.draw.rect(self.scr,(255,192,25), (50,250,650,50), 2)
        self.draw(self.scr, self.word,200, 28,self.text)
        pygame.display.update()

Typing().Run()